from openai import OpenAI
from project.utils.config import Config
import logging

logger = logging.getLogger(__name__)


class OpenAIClient:
    """
    Client to interact with the OpenAI API.

    Attributes:
        config (Config): Configuration object to fetch API keys and settings.
        client (OpenAI): OpenAI client initialized with the API key.
        prompt (str): Template prompt for generating responses.
        content (str): System content to guide the OpenAI model.
    """

    def __init__(self: 'OpenAIClient') -> None:
        """
        Initializes the OpenAIClient with the necessary configurations.

        Args:
            self: Instance of OpenAIClient.

        Returns:
            None
        """
        self.config: Config = Config()
        self.client: OpenAI = OpenAI(api_key=self.config.get_llm_key())
        self.prompt: str = self.config.get_llm_prompt()
        self.content: str = self.config.get_llm_content()
        logger.info("OpenAIClient initialized")

    def analyze_tweets(self: 'OpenAIClient', review: str) -> str:
        """
        Analyzes the given tweet review by generating a response from the OpenAI API.

        Args:
            self: Instance of OpenAIClient.
            review (str): The tweet review to be analyzed.

        Returns:
            str: The response generated by the OpenAI model.
        """
        prompt: str = self.prompt.replace("{text_tweet}", review)
        logger.info(f"Generating text with prompt: {prompt} and review tweets: {review}")

        response = self.client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": self.content},
                {"role": "user", "content": prompt}
            ],
            temperature=0.5,
            max_tokens=1000
        )
        return response.choices[0].message.content.strip()
